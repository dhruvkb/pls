import{_ as i,r as l,o as s,c as a,b as o,d as c,w as n,e,a as r}from"./app.b5c5948b.js";const d={},p=o("h1",{id:"upcoming",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#upcoming","aria-hidden":"true"},"#"),e(" Upcoming")],-1),u=e("In addition to its "),h=e("many existing features"),_=e(", we have bold plans for the future of "),f=o("code",null,"pls",-1),m=e(". Soon, "),b=o("code",null,"pls",-1),g=e(" will be able to do all the following."),w=r('<ul><li><p><code>pls</code> will add more spec-matching criteria to make the specs much more granular and fine-tuned.</p><ul><li>MIME type</li><li>globs</li><li>path relative to Git</li></ul></li><li><p><code>pls</code> will allow a more nuanced conditional approach for specs such as combining identification methods with <code>and</code>/<code>or</code>.</p></li><li><p>Specs should also get a specificity/priority setting to be able to override the specs above them.</p></li><li><p><code>pls</code> will be able to generate <code>tree</code>-like output recursively for subdirectories.</p></li><li><p><code>pls</code> will be able to parse <code>.gitignore</code> for importance rules and two-letter Git statuses for a simpler notation.</p></li></ul><p>If you have more ideas to improve the functionality of <code>pls</code> or want to help implement any of these features, please submit a PR. <code>pls</code> is free and open-source software that could use <a href="../contributing">your help</a>.</p>',2);function v(y,x){const t=l("RouterLink");return s(),a("div",null,[p,o("p",null,[u,c(t,{to:"/features/"},{default:n(()=>[h]),_:1}),_,f,m,b,g]),w])}var N=i(d,[["render",v],["__file","upcoming.html.vue"]]);export{N as default};
