import{_ as t,r as a,o as c,c as i,b as e,d as s,e as n,a as r}from"./app.b5c5948b.js";const l={},d=e("h1",{id:"icons",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#icons","aria-hidden":"true"},"#"),n(" Icons")],-1),p=e("p",null,[n("Icons in "),e("code",null,"pls"),n(" are abstracted one level above the raw codepoints to allow switching the icon between Nerd Font icons and emojis.")],-1),h=e("p",null,"Icons are simply mappings of icon names and the corresponding glyph.",-1),u=e("h2",{id:"nerd-font-icons",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#nerd-font-icons","aria-hidden":"true"},"#"),n(" Nerd Font icons")],-1),m=n("The keys in this dictionary are icon names and the values are Unicode code points corresponding to the icon. These can be obtained from the "),_={href:"https://www.nerdfonts.com/cheat-sheet",target:"_blank",rel:"noopener noreferrer"},f=n("Nerd Fonts cheat sheet"),k=n(". See the hex code at the bottom right of your preferred icon and prefix "),y=e("code",null,"\\u",-1),g=n(" to it."),b=r(`<div class="language-yaml ext-yml"><pre class="language-yaml"><code><span class="token key atrule">nerd_icons</span><span class="token punctuation">:</span>
  <span class="token key atrule">lock</span><span class="token punctuation">:</span> <span class="token string">&quot;\\uf023&quot;</span> <span class="token comment"># nf-fa-lock</span>
  <span class="token key atrule">key</span><span class="token punctuation">:</span> <span class="token string">&quot;\\uf80a&quot;</span> <span class="token comment"># nf-mdi-key_variant</span>
</code></pre></div><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>YAML has weird rules for strings. To ensure everything works as expected, wrap the unicode escape codes in double quotes <code>&quot;</code>.</p></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Since it&#39;s basically impossible to mentally associate a code point with the visual, you should put the actual class name in a comment for future reference.</p></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>You can also set your IDE font to a Nerd Font, and then just copy-paste the icon glyph directly from the Nerd Fonts site.</p></div><h2 id="emoji-icons" tabindex="-1"><a class="header-anchor" href="#emoji-icons" aria-hidden="true">#</a> Emoji icons</h2><p>The keys in this dictionary are icon names and the values are the actual emoji glyph.</p><div class="language-yaml ext-yml"><pre class="language-yaml"><code><span class="token key atrule">emoji_icons</span><span class="token punctuation">:</span>
  <span class="token key atrule">lock</span><span class="token punctuation">:</span> <span class="token string">&quot;\u{1F512}&quot;</span>
  <span class="token key atrule">key</span><span class="token punctuation">:</span> <span class="token string">&quot;\u{1F511}&quot;</span>
</code></pre></div><p>Compared to Nerd Font icons, emoji icons have fewer quirks. But they aren&#39;t as aesthetic for several reasons.</p><ul><li>Emojis lack color consistency as they are all inherently colorful. This also prevents them from being colored using the spec <code>color</code> like text.</li><li>Technology specific icons are largely absent from the set, leaving little to no choice of icons and forcing use of metaphors (like \u{1F40D} for Python).</li></ul><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,10),v=n("For reference, you can look at the "),x={href:"https://github.com/dhruvkb/pls/blob/main/src/pls/data/nerd_icons.yml",target:"_blank",rel:"noopener noreferrer"},w=n("built-in Nerd Font icons"),N=n(" and "),j={href:"https://github.com/dhruvkb/pls/blob/main/src/pls/data/emoji_icons.yml",target:"_blank",rel:"noopener noreferrer"},q=n("built-in emoji icons"),I=n(".");function T(F,E){const o=a("ExternalLinkIcon");return c(),i("div",null,[d,p,h,u,e("p",null,[m,e("a",_,[f,s(o)]),k,y,g]),b,e("p",null,[v,e("a",x,[w,s(o)]),N,e("a",j,[q,s(o)]),I])])}var V=t(l,[["render",T],["__file","icons.html.vue"]]);export{V as default};
